import 'mocha'
import { 包含中文, 标识符模式 } from '../lib/扩展/字符串扩展'
import path from 'path'
import { 创建字典树, 插入字典树, 查询字典树, 查询字典树_限制深度 } from '../lib/模型/字典树'
import { 创建字典, 查询字典, 查询字典_限制层数 } from '../lib/模型/本地输入法'

function 断言相等(a: any, b: any) {
  if (JSON.stringify(a) == JSON.stringify(b)) return
  throw new Error(`${JSON.stringify(a)} 不等于 ${JSON.stringify(b)}`)
}

it('包含中文', async function () {
  断言相等(包含中文('好'), true)
  断言相等(包含中文('n好o'), true)
  断言相等(包含中文('〇'), true)
  断言相等(包含中文('no'), false)
  断言相等(包含中文('$^'), false)
  断言相等(包含中文('|no'), false)
})
it('标识符模式', async function () {
  var 测试集 = [
    { 输入: '量-1', 预期结果: ['量', '1'] },
    { 输入: '1+数.1', 预期结果: ['1', '数', '.1'] },
    { 输入: '数.方法', 预期结果: ['数', '方法'] },
    { 输入: '1+数_1', 预期结果: ['1', '数_1'] },
    { 输入: '1+数$1', 预期结果: ['1', '数$1'] },
    { 输入: '1+$数1', 预期结果: ['1', '$数1'] },
    { 输入: '1+数?1', 预期结果: ['1', '数', '1'] },
    { 输入: '1+数+1', 预期结果: ['1', '数', '1'] },
    { 输入: '1+数-1', 预期结果: ['1', '数', '1'] },
    { 输入: '1+数*1', 预期结果: ['1', '数', '1'] },
    { 输入: '1+数/1', 预期结果: ['1', '数', '1'] },
    { 输入: '1+数\\1', 预期结果: ['1', '数', '1'] },
    { 输入: '1+数=1', 预期结果: ['1', '数', '1'] },
    { 输入: '1+数`1', 预期结果: ['1', '数', '1'] },
    { 输入: '1+数~1', 预期结果: ['1', '数', '1'] },
    { 输入: '1+数!1', 预期结果: ['1', '数', '1'] },
    { 输入: '1+数@1', 预期结果: ['1', '数', '1'] },
    { 输入: '1+数#1', 预期结果: ['1', '数', '1'] },
    { 输入: '1+数^1', 预期结果: ['1', '数', '1'] },
    { 输入: '1+数&1', 预期结果: ['1', '数', '1'] },
    { 输入: '1+数*1', 预期结果: ['1', '数', '1'] },
    { 输入: '1+数(1', 预期结果: ['1', '数', '1'] },
    { 输入: '1+数)1', 预期结果: ['1', '数', '1'] },
    { 输入: '1+数<1', 预期结果: ['1', '数', '1'] },
    { 输入: '1+数>1', 预期结果: ['1', '数', '1'] },
    { 输入: '1+数:1', 预期结果: ['1', '数', '1'] },
    { 输入: "1+数'1", 预期结果: ['1', '数', '1'] },
    { 输入: '1+数:1', 预期结果: ['1', '数', '1'] },
    { 输入: '1+数"1', 预期结果: ['1', '数', '1'] },
  ]
  for (var 测试项 of 测试集) {
    断言相等(测试项.输入.match(标识符模式), 测试项.预期结果)
  }
})

it('字典树', async function () {
  var obj = 创建字典树()
  插入字典树(obj, 'ni')
  插入字典树(obj, 'ni1')
  插入字典树(obj, 'ni2')
  插入字典树(obj, 'ni3')
  插入字典树(obj, 'ni45')
  var c = 查询字典树(obj, 'ni')
  断言相等(c, ['ni', 'ni1', 'ni2', 'ni3', 'ni45'])

  var obj = 创建字典树()
  插入字典树(obj, 'n')
  插入字典树(obj, 'nih')
  插入字典树(obj, 'niha')
  插入字典树(obj, 'nihao')
  var c = 查询字典树(obj, 'ni')
  断言相等(c, ['nih', 'niha', 'nihao'])

  var obj = 创建字典树()
  插入字典树(obj, 'ni')
  插入字典树(obj, 'ni1')
  插入字典树(obj, 'ni2')
  插入字典树(obj, 'ni21')
  插入字典树(obj, 'ni3')
  插入字典树(obj, 'ni31')
  插入字典树(obj, 'ni45')
  插入字典树(obj, 'ni451')
  插入字典树(obj, 'ni46')
  插入字典树(obj, 'ni461')
  var c = 查询字典树_限制深度(obj, 'ni', 2)
  断言相等(c, ['ni', 'ni1', 'ni2', 'ni3'])
  var c = 查询字典树_限制深度(obj, 'ni', 3)
  断言相等(c, ['ni', 'ni1', 'ni2', 'ni21', 'ni3', 'ni31', 'ni45', 'ni46'])

  var obj = 创建字典树()
  插入字典树(obj, 'n')
  插入字典树(obj, 'ni')
  插入字典树(obj, 'nih')
  插入字典树(obj, 'niha')
  插入字典树(obj, 'nihao')
  var c = 查询字典树_限制深度(obj, 'ni', 2)
  断言相等(c, ['ni', 'nih'])
})

it('字典', async function () {
  var dic = await 创建字典(path.resolve(__dirname, '../../字典/pinyin_simp.dict.txt'))
  var 查询 = 查询字典(dic, 'nihao')
  断言相等(查询, ['你好', '你好吗', '你好啊'])

  var 查询 = 查询字典_限制层数(dic, 're', 1)
  断言相等(查询, ['喏', '熱', '惹', '热'])

  var 查询 = 查询字典_限制层数(dic, 're', 2)
  断言相等(查询.length, 47)
})
